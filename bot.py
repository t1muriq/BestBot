# –ü—Ä–æ–µ–∫—Ç –Ω–µ—Ä–µ–∞–ª—å–Ω—ã–π –∫–æ—Ä–æ—á–µ
# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –±–æ—Ç –¥–ª—è –≤—Å–µ–≥–æ –Ω–∞ —Å–≤–µ—Ç–µ 

import redis
import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, CallbackQueryHandler, MessageHandler, filters
import requests
import os
import logging
import sys
from datetime import datetime
from models import User, SessionLocal
from migrations import run_migrations
from models import init_db

#–í–æ—Ç —ç—Ç–∞ —Ç–µ–º–∞ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ª–æ–≥–∏ –ø–∏—Å–∞–ª–∏—Å—å –≤ —Ä–∞–∑–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–æ –∑–∞–ø–æ–ª–Ω—è–µ–º–æ—Å—Ç–∏, –°–µ–π—á–∞—Å –∑–∞–º–µ–Ω—é –µ–µ –Ω–∞ –ø–æ –¥–∞—Ç–∞–º –ª–æ–ª
from logging.handlers import RotatingFileHandler
# –ü–æ –¥–∞—Ç–∞–º
from logging.handlers import TimedRotatingFileHandler

#–ó–¥–µ—Å—å –º—ã –∫–æ—Ä–æ—á–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
init_db()

# –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –ª–æ–≥–æ–≤, —è —Ö–∑ –ø–æ—á–µ–º—É —Ç–æ –∏–Ω–æ–≥–¥–∞ –Ω–µ —Ä–∞–∑–±–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —Ä–∞–∑–Ω—ã–µ —Ñ–∞–π–ª—ã
log_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'logs')
log_filename = os.path.join(log_dir, 'bot.log')

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –∏–º–µ–Ω–Ω–æ –ø–∏—Å–∞—Ç—å –ª–æ–≥–∏ —Å—É–µ—Ç–∞ —Å—É–µ—Ç–∞
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)

#–°–∞–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
try:
    os.makedirs(log_dir, exist_ok=True)
    logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ª–æ–≥–æ–≤: {log_dir}")

    # –°–æ–∑–¥–∞–µ–º RotatingFileHandler 
    # file_handler = RotatingFileHandler(
    #     log_filename,
    #     maxBytes=10*1024*1024,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ - 10MB
    #     backupCount=10,  # –•—Ä–∞–Ω–∏—Ç—å –º–∞–∫—Å–∏–º—É–º 10 —Ñ–∞–π–ª–æ–≤
    #     encoding='utf-8'
    # )

    #–¢–µ–ø–µ—Ä—å –ø–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É —Å–æ–∑–¥–∞–¥–∏–º –ø–æ –¥–∞—Ç–∞–º( –Ω—É —è —Ö–æ—Ç—å –ø–æ–ø—Ä–æ–±–æ–≤–∞–ª)
    file_handler = TimedRotatingFileHandler(
        log_filename,
        when='midnight', #–∫–∞–∂–¥—É—é –Ω–æ—á—å –æ–±–Ω–æ–≤–ª—è—Ç—å
        interval=1,
        backupCount=10,  # –•—Ä–∞–Ω–∏—Ç—å –º–∞–∫—Å–∏–º—É–º 10 —Ñ–∞–π–ª–æ–≤
        encoding='utf-8'
    )
    file_handler.suffix = "%Y%m%d"


    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤
    log_formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    file_handler.setFormatter(log_formatter)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫ –ª–æ–≥–≥–µ—Ä—É
    logger.addHandler(file_handler)
    
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    sys.exit(1)

#–ó–¥–µ—Å—å —è –∑–∞—Å—É–Ω—É–ª —ç—Ç–∏ —Ç–æ–∫–µ–Ω—ã –≤ .env (—Ç—É–¥–∞ –ø–∞—Ä–æ–ª—å –Ω–∞–¥–æ —Ç–æ–∂–µ –∑–∞—Å—É–Ω—É—Ç—å)
TOKEN = os.getenv("API_TOKEN")
WEATHER_API_KEY = os.getenv("WEATHER_API_KEY")

# Redis –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è, –∫–æ—Ä–æ—á–µ –∫–µ—à –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
REDIS_HOST = os.getenv('REDIS_HOST', 'localhost')
REDIS_PORT = int(os.getenv('REDIS_PORT', 6379))
CACHE_EXPIRATION = 600  # 10 minutes

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Redis 
redis_client = redis.Redis(host=REDIS_HOST, port=REDIS_PORT, decode_responses=True)

#—ç—Ç–æ –Ω–∞ –±—É–¥—É—â–µ–µ, –Ω–æ —Ö–∑, –º–Ω–µ –∫–∞–∂–µ—Ç—Å—è –Ω–µ –±—É–¥–µ–º —é–∑–∞—Ç—å
PATH_TO_WEATHER_TABLE = "weather_result/weather_list.csv"

#–ö–æ—Ä–æ—á–µ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ç–æ —Å–æ–∑–¥–∞–µ–º –µ–≥–æ, –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
async def save_or_update_user(user):
    """–ñ–µ—Å—Ç–∫–æ —é–∑–∞—é —Ç—Ä–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ —Ç–∏–ø–æ —à–∞—Ä—é WW"""
    db = SessionLocal()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db_user = db.query(User).filter(User.id == user.id).first()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {db_user is not None}")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} {user.username} {user.first_name} {user.last_name}")
        logger.info(f"–í—Å–µ –∞—Ç—Ç—Ä–∏–±—É—Ç—ã –∫–ª–∞—Å—Å–∞ user {dir(user)}")
        if db_user is None:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: {user.id}")
            db_user = User(
                id=user.id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name,
                registration_date=datetime.utcnow(),
                last_activity=datetime.utcnow()
            )
            db.add(db_user)
            try:
                db.flush()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
                logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –≤ –ë–î: {user.id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")
                db.rollback()
                return
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.id}")
            db_user.last_activity = datetime.utcnow()
            if user.username:
                db_user.username = user.username
            if user.first_name:
                db_user.first_name = user.first_name
            if user.last_name:
                db_user.last_name = user.last_name
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        db.commit()
        logger.info(f"–û–ø–µ—Ä–∞—Ü–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞11")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        db.rollback()
    finally:
        db.close()

# —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    await save_or_update_user(update.effective_user)
    keyboard = [
        [
            InlineKeyboardButton("üå§ –£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É", callback_data='weather'),
            InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data='help')
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–≥–æ–¥–Ω—ã–π –±–æ—Ç üå§\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )


async def get_weather_data(city: str):
    logger.info(f"–ó–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞: {city}")
    # –ü—Ä–æ–±—É—é –≤–∑—è—Ç—å –∏–∑ –∫–µ—à–∞
    cache_key = f"weather:{city.lower()}"
    cached_data = redis_client.get(cache_key)
    
    if cached_data:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}")
        return json.loads(cached_data)
    
    # –ï—Å–ª–∏ –≤ –∫–µ—à–µ –Ω–µ—Ç —Ç–∞–∫–æ–π —Å—É–µ—Ç—ã —Ç–æ –≤ –∞–ø–∏ –∏–¥—É
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_API_KEY}&units=metric&lang=ru"
    response = requests.get(url)
    data = response.json()
    
    if data.get("cod") == 200:
        logger.info(f"–£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ API –ø–æ–≥–æ–¥—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}")
        # Cache the successful response
        redis_client.setex(cache_key, CACHE_EXPIRATION, json.dumps(data))
    else:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≥–æ–¥—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}: {data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")

    
    return data

async def weather(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –≥–æ—Ä–æ–¥ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä: /weather Moscow")
        return

    city = ' '.join(context.args)
    data = await get_weather_data(city)

    if data.get("cod") != 200:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ –¥–ª—è —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞.")
        return

    weather_desc = data["weather"][0]["description"]
    temp = data["main"]["temp"]
    feels_like = data["main"]["feels_like"]

    message = (
        f"üåç –ì–æ—Ä–æ–¥: {city.title()}\n"
        f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n"
        f"ü§î –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {feels_like}¬∞C\n"
        f"üå§ –ü–æ–≥–æ–¥–∞: {weather_desc.capitalize()}\n"
        f"Timur –ü–∞—Ö–∞–Ω —Å—É–µ—Ç–Ω–æ–π {data['weather'][0]['icon']}\n"
    )

    await update.message.reply_text(message)

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {query.from_user.id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É {query.data}")
    await query.answer()

    if query.data == 'weather':
        await query.message.reply_text("–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É.")
    elif query.data == 'help':
        await query.message.reply_text(
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/weather <–≥–æ—Ä–æ–¥> - —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ\n"
            "/start - –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        )

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text.startswith('/'):
        return
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: {update.message.text}")
        
    city = update.message.text
    data = await get_weather_data(city)

    if data.get("cod") != 200:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ –¥–ª—è —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞.")
        return

    weather_desc = data["weather"][0]["description"]
    temp = data["main"]["temp"]
    feels_like = data["main"]["feels_like"]

    message = (
        f"üåç –ì–æ—Ä–æ–¥: {city.title()}\n"
        f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n"
        f"ü§î –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {feels_like}¬∞C\n"
        f"üå§ –ü–æ–≥–æ–¥–∞: {weather_desc.capitalize()}\n"
        f"Timur –ü–∞—Ö–∞–Ω —Å—É–µ—Ç–Ω–æ–π {data['weather'][0]['icon']}\n"
    )

    await update.message.reply_text(message)

if __name__ == '__main__':
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    run_migrations()
    logger.info("–ú–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("weather", weather))
    app.add_handler(CallbackQueryHandler(button_callback))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.run_polling()
